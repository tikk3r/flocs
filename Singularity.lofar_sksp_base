Bootstrap: docker
From: fedora:27

%files
    /home/frits/software/lofar-grid-hpccloud/requirements.txt $INSTALLDIR/requirements.txt
    /home/frits/software/lofar-grid-hpccloud/requirements3.txt $INSTALLDIR/requirements3.txt
%environment
    export INSTALLDIR=/opt/lofar
    . $INSTALLDIR/init.sh

%post
	# General environment settings.
	export J=4
	export INSTALLDIR=/opt/lofar
	export PYTHON_VERSION=2.7
	
	# Settings relevant to the installed software.
	export ARMADILLO_VERSION=8.600.0
	export BLAS_VERSION=0.2.17
	export BOOST_DOT_VERSION=1.69.0
	export BOOST_VERSION=1_69_0
	export CFITSIO_VERSION=3410
    export FFTW_VERSION=3.3.8
	export HDF5_VERSION=1.8.21
	export LAPACK_VERSION=3.6.0
	export OPENBLAS_VERSION=v0.3.5
	# Do not change, Armadillo wants this version of SuperLU.
	export SUPERLU_VERSION=v5.2.1
	export WCSLIB_VERSION=7.2
    export DEBIAN_FRONTEND=noninteractive

    #
    # System installs
	#
	dnf -y update
    dnf -y install dnf-plugins-core
	dnf -y install patch sudo yum-utils
	dnf -y install git svn wget vim nano
	dnf -y install automake autoconf cmake make
	dnf -y install gcc gcc-c++ gcc-gfortran
	dnf -y install arpack-devel python-devel python3-devel lapack-devel libpng-devel libxml2-devel readline-devel ncurses-devel f2py bzip2-devel libicu-devel scipy python-setuptools gsl gsl-devel gdal gdal-devel libpqxx libpqxx-devel
	dnf -y install bison flex ncurses tar bzip2 which gettext
	dnf -y install cmake3
    dnf -y install hdf5
	dnf -y install hdf5-devel
    dnf -y install python
	dnf -y install python-pip python2-tkinter python3-tkinter
    dnf -y install libsigc++20-devel gtkmm30-devel
    dnf -y install python3-devel
    dnf -y install lua lua-devel
    dnf -y install https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm
    dnf -y install pgplot
    dnf -y install python3-numpy-f2py
    dnf -y install qt5

    #
    # Install Boost
    #
    dnf -y install boost boost-devel boost-python boost-python-devel boost-python3 boost-python3-devel

    #
    # Install FFTW
    #
    dnf -y install fftw-devel fftw-libs

	#
	# Install OpenBLAS
	#
	dnf -y install blas-devel

	#
	# Install SuperLU
	#
	dnf -y install SuperLU SuperLU-devel

	#
	# Install Armadillo
	#
	dnf -y install armadillo armadillo-devel

    # 
    # Setup environment variables used during build
    #
    export CC=`which gcc`
	export CXX=`which g++`
    export CFLAGS="-mno-avx512f -mno-avx512pf -mno-avx512er -mno-avx512cd -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512ifma -mno-avx512vbmi"
    export CXXFLAGS="-std=c++11 -mno-avx512f -mno-avx512pf -mno-avx512er -mno-avx512cd -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512ifma -mno-avx512vbmi"
    export make=`which make`

	mkdir -p $INSTALLDIR
    export LD_LIBRARY_PATH=/opt/intel/mkl/lib/intel64:$LD_LIBRARY_PATH
    export CMAKE_PREFIX_PATH=/opt/intel/mkl/lib/intel64:$CMAKE_PREFIX_PATH
    export CPATH=/opt/intel/mkl/include:$CPATH
    export CFLAGS="-mno-avx512f -mno-avx512pf -mno-avx512er -mno-avx512cd -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512ifma -mno-avx512vbmi"
    export CXXFLAGS="-mno-avx512f -mno-avx512pf -mno-avx512er -mno-avx512cd -mno-avx512vl -mno-avx512bw -mno-avx512dq -mno-avx512ifma -mno-avx512vbmi"

    ###################
    # Source installs #
    ###################
	#
	# Install cfitsio
	#
    dnf -y install cfitsio cfitsio-devel

	#
	# Install wcslib
	#
    dnf -y install wcslib wcslib-devel 

    #
    # Install Intel MKL
    #
    sudo dnf config-manager --add-repo https://yum.repos.intel.com/mkl/setup/intel-mkl.repo
    sudo rpm --import https://yum.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB
    dnf -y install intel-mkl intel-mkl-64bit

    #   
    # Install Image Domain Gridder (IDG)
    #   
    mkdir -p $INSTALLDIR/idg && cd $INSTALLDIR/idg
    git clone https://gitlab.com/astron-idg/idg.git src 
    cd src && mkdir build && cd build
    cmake -DCMAKE_INSTALL_PREFIX=$INSTALLDIR/idg -DBUILD_WITH_MKL=ON ..
    make -j $J
    make install
    rm -rf $INSTALLDIR/idg/src

	echo "Installation directory contents:"
	ls ${INSTALLDIR}

    #
    # Wrap up installation, remove unnecessary stuff.
    dnf -y autoremove
    dnf -y clean all

	#
	# init-lofar
	#
	echo export INSTALLDIR=$INSTALLDIR > $INSTALLDIR/init.sh

    #
    # entrypoint
    #
%runscript
    echo source $INSTALLDIR/init.sh >> $HOME/.bashrc
    echo export PATH=\$PATH >> $INSTALLDIR/init.sh
    echo export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH >> $INSTALLDIR/init.sh
    . $INSTALLDIR/init.sh

%help
    This Singularity image acts as a base for the LOFAR installation. It has Fedora 31 setup, with the required dependencies installed. These are:
    
    * Armadillo $ARMADILLO_VERSION
    * Boost $BOOST_VERSION
    * CFITSIO $CFITSIO_VERSION
    * SuperLU $SUPERLU_VERSION
    * WCSLIB $WCSLIB_VERSION
