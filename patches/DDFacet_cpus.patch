--- AsyncProcessPool.py_backup  2021-10-20 22:58:56.203711272 +0200
+++ AsyncProcessPool.py 2021-10-20 23:06:34.614377662 +0200
@@ -259,25 +259,28 @@
             print>> log, "Parent and I/O affinities not specified, leaving unset"
         else:
             print>> log, ModColor.Str("Fixing parent process to vthread %d" % self.parent_affinity, col="green")
-        psutil.Process().cpu_affinity(range(self.ncpu) if not self.parent_affinity else [self.parent_affinity])
+
+        avail_cores = psutil.Process().cpu_affinity()
+        psutil.Process().cpu_affinity(avail_cores[:self.ncpu] if not self.parent_affinity else [self.parent_affinity])

         # if NCPU is 0, set to number of CPUs on system
         if not self.ncpu:
             self.ncpu = maxcpu
         elif self.ncpu > maxcpu:
-            print>>log,ModColor.Str("NCPU=%d is too high for this setup (%d cores, affinity %s)" %
+            print(ModColor.Str("NCPU=%d is too high for this setup (%d cores, affinity %s)" %
                                     (self.ncpu, psutil.cpu_count(),
                                      str(self.affinity) if isinstance(self.affinity, int)
                                      else ",".join(map(str, self.affinity)) if isinstance(self.affinity, list)
-                                     else "disabled"))
-            print>>log,ModColor.Str("Falling back to NCPU=%d" % (maxcpu))
+                                     else "disabled")))
+            print(ModColor.Str("Falling back to NCPU=%d" % (maxcpu)))
             self.ncpu = maxcpu
         self.procinfo = psutil.Process()  # this will be used to control CPU affinity

         # create a queue for compute-bound tasks
         # generate list of CPU cores for workers to run on
         if isinstance(self.affinity, int) and (not self.affinity or self.affinity == 1):
-            cores = range(self.ncpu)
+            # cores = range(self.ncpu)
+            cores = avail_cores[:self.ncpu]
         elif isinstance(self.affinity, int) and self.affinity == 2:
             cores = range(0, self.ncpu * 2, 2)
         elif isinstance(self.affinity, int) and self.affinity == -2:
@@ -285,9 +288,10 @@
         elif isinstance(self.affinity, list):
             cores = self.affinity[:self.ncpu]
         elif not self.affinity:
-            cores = range(self.ncpu)
+            # cores = range(self.ncpu)
+            cores =  avail_cores[:self.ncpu]
         else:
-            raise ValueError, "unknown affinity setting"
+            raise ValueError("unknown affinity setting")
         if not self.affinity:
             print>> log, "Worker affinities not specified, leaving unset"
         else:
