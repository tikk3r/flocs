Bootstrap: docker
From: ubuntu:latest

%environment
    export INSTALLDIR=/opt/lofar
    . $INSTALLDIR/init.sh

%post
	# General environment settings.
	export J=2
	export INSTALLDIR=/opt/lofar
	export PYTHON_VERSION=2.7
	
	# Settings relevant to the installed software.
	export ARMADILLO_VERSION=8.600.0
	export BLAS_VERSION=0.2.17
	export BOOST_DOT_VERSION=1.63.0
	export BOOST_VERSION=1_63_0
	export CFITSIO_VERSION=3410
	export LAPACK_VERSION=3.6.0
	export OPENBLAS_VERSION=v0.3.2
	# Do not change, Armadillo wants this version of SuperLU.
	export SUPERLU_VERSION=v5.2.1
	export WCSLIB_VERSION=5.20

	apt -y update
	apt -y install patch sudo
	apt -y install git subversion wget
	apt -y install autoconf autotools-dev cmake make automake
	apt -y install g++ gcc gfortran
	apt -y install libarpack2-dev libblas-dev libboost-all-dev libboost-python-dev libfftw3-dev libpython-dev liblapack-dev libpng-dev libxml2-dev python-numpy-dev libreadline-dev ncurses-dev bzip2 libbz2-dev libicu-dev python-setuptools gsl-bin libgsl0-dev libgsl0-dbg gdal-bin libgdal-dev python-gdal libpqxx-dev
	apt -y install bison flex libncurses5 libncurses5-dev tar bzip2 gettext
	apt -y install libhdf5* hdf5-tools
	apt -y install python-pip python-tk

	apt -y remove python-numpy
	#pip install --upgrade pip
	pip install --upgrade setuptools
	pip install --upgrade numpy astropy scipy matplotlib numexpr tables
	pip install --upgrade boost mock pp progressbar pyfits pywcs python-monetdb xmlrunner unittest2

	# FACTOR requisites.
	pip install pyparsing
    export CC=`which gcc`
	export CXX=`which g++`
    #export make=$INSTALLDIR/make/bin/make
    export make=$(which make)

	mkdir -p $INSTALLDIR
	#
	# Install GNU Make 4
	#
	#mkdir -p $INSTALLDIR/make && cd $INSTALLDIR/make
	#wget http://ftp.gnu.org/gnu/make/make-4.2.tar.gz && tar xf make-4.2.tar.gz && cd make-4.2
	#./configure --prefix=$INSTALLDIR/make && make -j $J && make install
	#rm -rf $INSTALLDIR/make/make-4.2.tar.gz

	#
	# Install CMake
	#
	mkdir -p $INSTALLDIR/cmake && cd $INSTALLDIR/cmake
	wget https://github.com/Kitware/CMake/releases/download/v3.13.1/cmake-3.13.1.tar.gz && tar xf cmake-3.13.1.tar.gz && cd cmake-3.13.1
	./bootstrap --prefix=$INSTALLDIR/cmake -DCMAKE_BUILD_TYPE:STRING=Release && $make -j $J && $make install
	rm -rf $INSTALLDIR/cmake/cmake-3.13.1.tar.gz
	
	#
	# Install Boost.Python
	#
	#mkdir -p $INSTALLDIR/boost/src
	#cd $INSTALLDIR && wget https://dl.bintray.com/boostorg/release/${BOOST_DOT_VERSION}/source/boost_${BOOST_VERSION}.tar.gz
	#cd $INSTALLDIR && tar xzf boost_${BOOST_VERSION}.tar.gz -C boost && cd boost/boost_${BOOST_VERSION} && ./bootstrap.sh --prefix=$INSTALLDIR/boost && ./b2 headers && ./b2 install toolset=gcc cxxflags=-std=c++11 --prefix=$INSTALLDIR/boost --with=all -j $J
	#rm -rf $INSTALLDIR/boost/src $INSTALLDIR/boost_${BOOST_VERSION}.tar.gz

	#
	# Install OpenBLAS
	#
	mkdir -p $INSTALLDIR/openblas/
	cd $INSTALLDIR/openblas/ && git clone https://github.com/xianyi/OpenBLAS.git src && cd src && git checkout $OPENBLAS_VERSION
	cd $INSTALLDIR/openblas/src && $make -j $J && $make install PREFIX=$INSTALLDIR/openblas
	rm -rf $INSTALLDIR/openblas/src

	#
	# Install SuperLU
	#
	mkdir -p $INSTALLDIR/superlu/build
	cd $INSTALLDIR/superlu/ && git clone https://github.com/xiaoyeli/superlu.git src && cd src && git checkout $SUPERLU_VERSION
	cd $INSTALLDIR/superlu/build && cmake ../src -DCMAKE_INSTALL_PREFIX=$INSTALLDIR/superlu -DUSE_XSDK_DEFAULTS=TRUE -Denable_blaslib=OFF -DBLAS_LIBRARY=$INSTALLDIR/openblas/lib/libopenblas.so && $make -j $j && $make install
	rm -rf $INSTALLDIR/superlu/src

	#
	# Install Armadillo
	#
	mkdir -p $INSTALLDIR/armadillo/
	cd $INSTALLDIR/armadillo && wget http://sourceforge.net/projects/arma/files/armadillo-$ARMADILLO_VERSION.tar.xz && tar xf armadillo-$ARMADILLO_VERSION.tar.xz && rm armadillo-$ARMADILLO_VERSION.tar.xz
	cd $INSTALLDIR/armadillo/armadillo-$ARMADILLO_VERSION && ./configure && cmake . -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLDIR/armadillo -Dopenblas_LIBRARY:FILEPATH=$INSTALLDIR/openblas/lib/libopenblas.so  -DSuperLU_INCLUDE_DIR:PATH=$INSTALLDIR/superlu/include -DSuperLU_LIBRARY:FILEPATH=$INSTALLDIR/superlu/lib64/libsuperlu.so && $make -j $J && $make install
	rm -rf $INSTALLDIR/armadillo/armadillo-$ARMADILLO_VERSION.tar.xz


	#
	# install-cfitsio
	#
	mkdir -p ${INSTALLDIR}/cfitsio/build
	cd ${INSTALLDIR}/cfitsio && wget --retry-connrefused ftp://anonymous@heasarc.gsfc.nasa.gov/software/fitsio/c/cfitsio${CFITSIO_VERSION}.tar.gz
	cd ${INSTALLDIR}/cfitsio && tar xf cfitsio${CFITSIO_VERSION}.tar.gz
	cd ${INSTALLDIR}/cfitsio/build && cmake -DCMAKE_INSTALL_PREFIX=${INSTALLDIR}/cfitsio/ ../cfitsio
	cd ${INSTALLDIR}/cfitsio/build && $make -j ${J}
	cd ${INSTALLDIR}/cfitsio/build && $make install
	rm -rf $INSTALLDIR/cfitsio/cfitsio${CFITSIO_VERSION}.tar.gz

	#
	# install-wcslib
	#
	mkdir ${INSTALLDIR}/wcslib
	if [ "${WCSLIB_VERSION}" = "latest" ]; then cd ${INSTALLDIR}/wcslib && wget --retry-connrefused ftp://anonymous@ftp.atnf.csiro.au/pub/software/wcslib/wcslib.tar.bz2 -O wcslib-latest.tar.bz2; fi
	if [ "${WCSLIB_VERSION}" != "latest" ]; then cd ${INSTALLDIR}/wcslib && wget --retry-connrefused ftp://anonymous@ftp.atnf.csiro.au/pub/software/wcslib/wcslib-${WCSLIB_VERSION}.tar.bz2; fi
	cd ${INSTALLDIR}/wcslib && tar xf wcslib-*.tar.bz2
	#cd ${INSTALLDIR} && mkdir wcslib && cd wcslib && svn checkout https://github.com/astropy/astropy/trunk/cextern/wcslib
	cd ${INSTALLDIR}/wcslib/wcslib* && ./configure --prefix=${INSTALLDIR}/wcslib --with-cfitsiolib=${INSTALLDIR}/cfitsio/lib/ --with-cfitsioinc=${INSTALLDIR}/cfitsio/include/ --without-pgplot
	cd ${INSTALLDIR}/wcslib/wcslib* && $make -j $J
	cd ${INSTALLDIR}/wcslib/wcslib* && $make install
	rm -rf $INSTALLDIR/wcslib/wcslib-*.tar.bz2

    #   
    # Install Image Domain Gridder (IDG)
    #   
    mkdir -p $INSTALLDIR/idg && cd $INSTALLDIR/idg
    git clone https://gitlab.com/astron-idg/idg.git src 
    cd src && mkdir build && cd build
    cmake -DCMAKE_INSTALL_PREFIX=$INSTALLDIR/idg ..
    make -j $J
    make install

	echo "Installation directory contents:"
	ls ${INSTALLDIR}

    apt -y clean

	#
	# init-lofar
	#
	echo export INSTALLDIR=$INSTALLDIR > $INSTALLDIR/init.sh
	echo export LD_LIBRARY_PATH=\$INSTALLDIR/armadillo/lib64:\$INSTALLDIR/boost/lib:\$INSTALLDIR/cfitsio/lib:\$INSTALLDIR/superlu/lib64:\$INSTALLDIR/wcslib/:\$LD_LIBRARY_PATH  >> $INSTALLDIR/init.sh
    echo export make=/opt/lofar/make/bin/make >> $INSTALLDIR/init.sh
    echo export cmake=/opt/lofar/cmake/bin/cmake >> $INSTALLDIR/init.sh

    #
    # entrypoint
    #
%runscript
    echo source $INSTALLDIR/init.sh >> $HOME/.bashrc
    . $INSTALLDIR/init.sh

%help
    This Singularity image acts as a base for the LOFAR installation. It has CentOS 7.5 setup, with the required dependencies installed. These are:
    
    * Armadillo $ARMADILLO_VERSION
    * Boost $BOOST_VERSION
    * CFITSIO $CFITSIO_VERSION
    * SuperLU $SUPERLU_VERSION
    * WCSLIB $WCSLIB_VERSION
